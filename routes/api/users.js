const express = require("express");
const router = express.Router();
const getUser = require('../../controllers/users.controller');
const userValid = require('../../validators/userUpdate');
const verifyRoles= require('../../middlewares/verifyRoles');
const roles =require('../../config/rolesList');
/**
 * @swagger
 * components:
 *   schemas:
 *     User:
 *       type: object
 *       required:
 *           - fullName
 *           - email
 *           - password
 *       properties:
 *         id:
 *           type: string   
 *           description: The auto-generated id
 *         fullName:
 *           type: string
 *           description: The user's fullName
 *         email:
 *           type: string
 *           description: The email of the user
 *         password:
 *           type: string
 *           description: The user's password
 *       example:
 *         id: d5cgf473
 *         fullName: MUHIRE Ighor
 *         email: muhireighr@gmail.com
 *         password: helloword         
 */     
/**  
 * @swagger
 * tags:
 *   name: Users
 *   description: The Users managing API
 * 
 */       
/**
 * @swagger
 * /api/users:
 *    get:
 *      summary: Returns the list of all the users
 *      tags: [Users]
 *      responses: 
 *        200:
 *          description: The list of all the books
 *          content:
 *            application/json:
 *              schema:
 *                type: array
 *                items: 
 *                  $ref: '#/components/schemas/User'
 *                                      
 */
 
router.get('/',getUser.getUser);
/**
 * @swagger
 * /api/users:
 *    post:
 *      summary: Create a new User
 *      tags: [Users]
 *      requestBody:
 *        required: true
 *        content:
 *          application/json:
 *            schema:
 *              $ref: '#/components/schemas/User'
 *      responses:
 *        200:
 *          description: The user was successfully created!
 *          content:
 *            application/json:
 *              schema:
 *                $ref:'#/components/schemas/User'
 *        500:
 *          descritpion: Some server error
 */
router.post('/',userValid.validateUser,getUser.handleNewUser)
/**
 * @swagger
 * /api/users/{id}:
 *    put:
 *      summary: Update the  book by Id
 *      tags: [Users]
 *      parameters:
 *        - in: path
 *          name: id
 *          schema:
 *             type: string
 *          required: true
 *          description: The user id
 *      requestBody:
 *        required: true
 *        content:
 *          application/json:
 *            schema:
 *              $ref:'#components/schemas/User'
 *      responses:
 *        200:
 *          description: The book was updated!
 *          content:
 *            application/json:
 *              schema:
 *                $ref: '#components/schemas/User'
 *        404:
 *          description: The book was not updated!
 *        500:
 *          description: There was some server error!
 */
router.put('/:id',verifyRoles(roles.admin,roles.user),getUser.updateUser)
/**
 * @swagger
 * /api/users/{id}:
 *    delete:
 *      summary: Remove a user by Id
 *      tags: [Users]
 *      parameters:
 *        - in: path
 *          name: id
 *          description: The User's autogenerated Id
 *          schema:
 *            type: string
 *            required: true
 *      responses:
 *        200:
 *          description: User deleted successfully
 *     
 *        404:
 *          description: User not found!
 *        
 */   
router.delete('/:id',getUser.deleteUser)
/**
 * @swagger
 * /api/users/{id}:
 *    get:
 *      summary: Get the user by Id
 *      tags: [Users]
 *      parameters: 
 *        - in: path
 *          name: id
 *          schema:
 *            type: string
 *            required: true
 *            description: The auto generated user id
 *      requestBody:
 *        required: true
 *        content:
 *          application/json:
 *            schema:
 *              $ref: '#/components/schemas/User'
 *      responses:
 *        200:
 *          description: The User description by Id
 *          contens:
 *            application/json:
 *              schema:
 *                $ref: '#/components/schemas/User'
 * 
 *        400:
 *          description: The usesr was not found!
 *  
 */
router.get('/:id',getUser.getOneUser)

module.exports = router;